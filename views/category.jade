extends layout

block content

	if message
		p.pull-center.message #{message}
	if error
		p.pull-center.error #{error}

	- var day   = theData[0].date.getDate();
	- var month = theData[0].date.getMonth() + 1;
	if (month < 10)
		- month = '0'+month;
	- var year  = theData[0].date.getFullYear();
	.pure-g-r
		.pure-u-1-4
		.pure-u-1-2.pull-center
			h2.sans <small>Your daily</small> #{category.name}
		.pure-u-1-4

	#graph(style="height:300px;").pull-center
		- var sum = 0;
		- for d in theirData
			- sum += d;
		- sum = (Math.round((sum/theirData.length)*10)/10);
		- var data = [], dumb = [], avg = 0;
		- for d in theData
			- data.push(d.quantity);dumb.push(sum);avg += d.quantity;
		- avg = (Math.round((avg/theData.length)*10)/10)
		- var max_of_array = Math.max.apply(Math, data), min_of_array = Math.min.apply(Math, data);
		- var taDate = theData[theData.length-1].date.getDate(), taMonth = theData[theData.length-1].date.getMonth(), toDate = (new Date).getDate(), toMonth = (new Date).getMonth();
		span.otherly Dataset: #{data.length} | Max: #{max_of_array} | Min: #{min_of_array} | Avg: #{avg} | Latest: #{theData[theData.length-1].quantity}
			if ((taDate == toDate) && (taMonth == toMonth))
				small  (today)
		br
		small.otherly Average for your age and gender: #{sum} (grey line)<br>
			
	#stuff.second-main.pure-g-r.otherly
		.pure-u-1-6
		.pure-u-1-3
			form(action="/add-datum", method="post").pure-g-r
				- var d = new Date, day = d.getDate(), month = d.getMonth()+1, year = d.getFullYear();
				if (month < 10)
					- month = '0'+month;
				if (day < 10)
					- day = '0'+day;
				.pure-u-3-4
					#category
						p.underline #{category.name}
						input(type="hidden", data-provide="typeahead", name="category", placeholder="Name/Category", value='#{ category.name }')
				.pure-u-1-4
					input.numeric(type="float", name="quantity", placeholder="Quantity")
				#past-date.hidden
					input(type="date", name="date", value="#{year+'-'+month+'-'+day}", placeholder="YYYY-MM-DD")
				input(type="hidden", name="account", value='#{user._id}')
				#submit
					input(type="submit", value="Add #{category.name}")
				.pure-u-1
					a.btn(onClick="addPastData()") Add past data
		.pure-u-1-3
			h4.pull-center Your History
			- for d in theData.reverse()
				p.pull-center
					a(href="/datum/#{d._id}") #{d.quantity} <small>on</small> #{d.date.getMonth()+1}/#{d.date.getDate()}/#{d.date.getFullYear()}
	script(src="http://d3js.org/d3.v3.min.js")
	script(src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js")
	script(src='/javascripts/numeric.js')
	script(src='/javascripts/add-datum.js')
	#divvy.tooltip(style='opacity:0;')
	script
		console.log(#{theirData});
		// create an SVG element inside the #graph div that fills 100% of the div
		var div = document.getElementById("graph");
		var graph = d3.select("#graph").append("svg:svg").attr("width", "100%").attr("height", "100%");
		var max   = d3.max([#{data}]), min = d3.min([#{data}]);;
		// create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
		var data = [#{data}], dumb = [#{dumb}];console.log('sum = '+#{sum}+', '+#{sum});
								console.log('max = '+#{max_of_array}+', min = '+#{min_of_array}+', and length = '+data.length)
		var divvy = d3.select("#divvy");
		// X scale will fit values from 0-10 within pixels 0-100
		var x = d3.scale.linear().domain([0, data.length]).range([(div.offsetWidth/12), (div.offsetWidth)]);
		// Y scale will fit values from 0-10 within pixels 0-100
		var y = d3.scale.linear().domain([(#{max_of_array}+1), (#{min_of_array}-2)]).range([0, 200]);

		// create a line object that represents the SVN line we're creating
		var line = d3.svg.line()
		// assign the X function to plot our line as we wish
		.x(function(d,i) {
		// verbose logging to show what's actually being done
		// console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
		// return the X coordinate where we want to plot this datapoint
		return x(i);
		})
		.y(function(d) {
		// verbose logging to show what's actually being done
		// console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
		// return the Y coordinate where we want to plot this datapoint
		return y(d);
		}).interpolate("monotone")

		// display the line by appending an svg:path element with the data line we created above
		graph.append("svg:path")
		.attr("id", "myOtherPath")
		.attr("stroke", "lightgrey")
		.attr("stroke-width", 1)
		.attr("fill", "none")
		.attr("d", line(dumb))
		.attr("id", "myOtherPath");
		graph.append("svg:path")
		.attr("id", "myPath")
		.attr("stroke", "#384682")
		.attr("stroke-width", 1)
		.attr("fill", "none")
		.attr("d", line(dumb))
		.attr("id", "myPath")
		.transition().duration(1000).attr("d", line(data))
		.ease('bounce');

		graph.on('mouseover', function() {
			var x = document.getElementsByClassName('otherly');
			for (var i=0;i<x.length;i++){
				x[i].className = ' otherly other';
			};
		}).on('mouseout', function() {
			var x = document.getElementsByClassName('otherly');
			for (var i=0;i<x.length;i++){
				x[i].className = ' otherly immune';
			};
		});

		graph.selectAll('.point')
		.data(data).enter()
		.append("svg:circle")
		.attr("class", function(d, i) {if (d === max) {return 'point max';} else {return 'point';}})
		.attr("cx", function(d, i) {
			return x(i);
		})
		.attr("cy", function(d) {
			return y(d);
		})
		.attr("r", function(d, i) {
			if ((d === max)||(d === min)) {
				return 6;
			} else {
				return 3;
			}
		}).attr("fill", "rgba(56,70,130,0)").attr("stroke", "rgba(56,70,130,0.4)")
		.on('mouseover', function(d) {
			d3.select(this).attr('r', 8).attr("fill", "rgba(56,70,130,0.3)").attr("stroke", "rgba(56,70,130,0.5)");
			divvy.transition().duration(200).style("opacity", .75);
			divvy.html(d.toString())
			.style("left", (d3.event.pageX) + "px")     
			.style("top", (d3.event.pageY - 28) + "px");
		})
		.on('mouseout', function() {
			return d3.select(this).attr('r', function(d, i) {
				if ((d === max)||(d === min)) {
					return 8;
				} else {
					return 3;
				}
			});
		})
		.on('click', function(d, i) {
			divvy.transition().duration(200).style("opacity", .75);
			divvy.html(d.toString())
			.style("left", (d3.event.pageX) + "px")     
			.style("top", (d3.event.pageY - 28) + "px");  
		});
		var count = 0;
		function onlyGraph() {
			var x = document.getElementsByClassName('otherly');
			if (count%2 === 0){
				for (var i=0;i<x.length;i++){
					x[i].className += ' other';
				}count++;
			}else{
				for (var i=0;i<x.length;i++){
					x[i].className += ' immune';
				}count++;
			}
		};
